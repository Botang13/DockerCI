#!/bin/bash

# Check if docker and docker-compose are installed
command -v docker >/dev/null 2>&1 || { echo "docker is not installed. Aborting." >&2; exit 1; }
command -v docker-compose >/dev/null 2>&1 || { echo "docker-compose is not installed. Aborting." >&2; exit 1; }

package_dir="vendor/manmath/dockerci"
config_dir="${package_dir}/config"
export HOST_USER_ID="${UID}"

action=$1

# Generate project name from folder name
projectname=${PWD##*/}
projectname=`echo ${projectname// /_}`
projectname=`echo ${projectname} | tr '[A-Z]' '[a-z]'`

# Wrap docker-compose command to use config from package
wrapped_command="docker-compose -p \"${projectname}\" -f ${package_dir}/docker-compose.yml"

# Use the projects folder name as servername
DOCKER_CI_SERVERNAME=${projectname}

# Default port for dockerci
DOCKER_CI_PORT=8080

# Use Development context if CI Context is not set
DOCKER_CI_CONTEXT=${CI_ENV:=development}

# Replace the markers in the merge config file
sed -e "s~DOCKER_CI_SERVERNAME~${DOCKER_CI_SERVERNAME} *.${DOCKER_CI_SERVERNAME}~g;s~DOCKER_CI_CONTEXT~${DOCKER_CI_CONTEXT}~g" ${config_dir}/web/nginx_default.conf > ${config_dir}/web/.nginx_default_merged.conf
sed -e "s~DOCKER_CI_SERVERNAME~test.${DOCKER_CI_SERVERNAME}~g;s~DOCKER_CI_CONTEXT~${DOCKER_CI_CONTEXT}/testing~g" ${config_dir}/web/nginx_default.conf > ${config_dir}/web/.nginx_default_test_merged.conf

# Make sure all entrypoint scripts are executable
chmod +x ${package_dir}/scripts/entrypoint/*.sh

# Create placeholder for storing web ip
touch ${config_dir}/web/ip_address.txt

echo "####"
echo "### Project name    : ${projectname}"
echo "### CI_ENV          : ${DOCKER_CI_CONTEXT}"
echo "### Testing context : ${DOCKER_CI_CONTEXT}/testing"
echo "###"
echo "### DockerCI is now running action '${action}'"
echo "####"

# Wrap docker-compose command to use config from package, passing CI context on run action
if [ "$action" = "run" ]; then
	${wrapped_command} $1 --rm -e CI_ENV=${DOCKER_CI_CONTEXT} ${*:2}
else
	${wrapped_command} $*
fi

if [ "$action" = "up" ]; then
	# Get ip address of web container, store in ip_address.txt file and send it to app container
	${wrapped_command} run --rm -e PROJECT_NAME=${projectname} web /entrypoint.sh
	${wrapped_command} run --rm app /entrypoint.sh

	echo "####"
	echo "### Done! Your app is running here  : ${projectname}"
	echo "### Testing context is running here : test.${projectname}"
	echo "####"
fi
